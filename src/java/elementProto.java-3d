
import java.io.*;
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;
import com.sun.j3d.utils.applet.MainFrame;
import com.sun.j3d.utils.geometry.Sphere;
import com.sun.j3d.utils.geometry.ColorCube;
import com.sun.j3d.utils.geometry.Cylinder;
import com.sun.j3d.utils.geometry.Box;
import com.sun.j3d.utils.behaviors.mouse.*;
import com.sun.j3d.utils.universe.*;
import javax.media.j3d.*;
import javax.vecmath.*;
import java.util.Enumeration;
import java.lang.Object;
import supportingClasses.*;


public class elementProto extends Applet implements ActionListener, AdjustmentListener,ItemListener
  {
  static final Color3f red   = new Color3f(1.0f, 0.0f, 0.0f);
  static final Color3f green = new Color3f(0.0f, 1.0f, 0.0f);
  static final Color3f blue  = new Color3f(0.0f, 0.0f, 1.0f);
  static final Color3f black  = new Color3f(0.0f, 0.0f, 0.0f);
  static final Color3f yellow = new Color3f(1.0f, 1.0f, 0.0f);
  static final Color3f white = new Color3f(1.0f, 1.0f, 1.0f);
  static final Color3f grey = new Color3f(0.5f, 0.5f, 0.5f);
  
  
  // This determines the maximum height of the histogram, and the also 
  // the renormalization factor for the histogram value 
  
  static final float normalizationFactor = 12.0f;
  
  // Position Interpolator & alphaDuration for animation
  KBRotPosScaleSplinePathInterpolator[] positionInterpolator;
  Alpha alphaAnimation;
  int alphaDuration = 25000;
  boolean start = true;
  // Histogram Data variable
   
  ReadVariableData histogramData;

 
  // Privates variable for UI
  Button animateButton;
  Button nextStepButton;
  Button prevStepButton;
  Button browseButton;
  Button browseParserButton;
  Button readDataButton;
  
  // ni's input
  Button cropDataButton;
  TextField neutronValueText;
  TextField protonValueText;
  /////////////////
  
  Checkbox loadParserCheck;
  Checkbox linear;
  Checkbox logarithmic;
  CheckboxGroup scaleMode;
  TextField loadDataText;
  TextField loadParserText;
  FileDialog loadDataDialog;
  FileDialog loadParserDialog;
  boolean animationOn = true;
  TimeDisplay timeDisplay;
  BranchGroup scene;
  SimpleUniverse myUniverse;
  
  ColorRamping colorRamp;
  Histogram3D[] histograms;
  int offsetTimeIndex = 0;
  String lastOpenedDataDir = ".";
  String lastOpenedParserDir = ".";
  
  // Method to translate a transform group using passed Alpha, knot, and float[] histogramValue, when passed a TG
  
  private TransformGroup translateTransformGroup(Histogram3D histogram, BoundingBox objectBound, float[] knot, 
                                                 KBRotPosScaleSplinePathInterpolator myPosInterpolator)
    {
    float head, pitch, bank, tension, continuity, bias;
    int interpolationType;
    ColoringAttributes histogramCA;
    KBKeyFrame[] myKeyFrame = new KBKeyFrame[histogram.abundance.length];
    TimestepBehavior timestepper;
    Point3f scale;
    
    scale = new Point3f(1.0f, 1.0f, 1.0f);
    interpolationType = 0;
    head        = 0.0f;
    pitch       = 0.0f;
    bank        = 0.0f;
    tension     = 0.0f;
    continuity  = 0.0f;
    bias        = 0.0f;
    
    colorRamp = new ColorRamping(-normalizationFactor, 0.0f);
    
    // Set transformGroup capability
    histogram.tg.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
    histogram.tg.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
    
    
    /******  Setting up Animation Behaviour *******/
    
    // Convert from float value to Point3f, then create KeyFrame
    // X-Position is shifted about neutronNumber / 2 so that the origin is approximately in the middle
    // Z-Position is shifted about protonNumber / 2 so that the origin is approximately in the middle
    
    Point3f[] positions = new Point3f[histogram.abundance.length];
    for (int i=0; i<histogram.abundance.length; i++)
      {
      positions[i] = new Point3f((float) histogram.neutronNumber - ((float)histogramData.maxNeutron/2.0f), 
                                  histogram.abundance[i]-normalizationFactor, 
                                  (float) -histogram.protonNumber + ((float)histogramData.maxProton/2.0f));
      
      // Create KeyFrame
      myKeyFrame[i] = new KBKeyFrame(knot[i], interpolationType, positions[i], head, pitch, bank, scale, 
                                     tension, continuity, bias);
      // System.out.println("Positions: " + positions[i] + " proton: " + histogram.protonNumber + " neutron: " + histogram.neutronNumber);                                     
      }
    
    // Create the Axis of transformation
    Transform3D axisT3D = new Transform3D();
    
    // Get Coloring Attributes for the Appearance 
    histogramCA = histogram.fillingAppearance.getColoringAttributes();
    
    // Set up the interpolator 
    
    myPosInterpolator.setAlpha(alphaAnimation);
    myPosInterpolator.setTarget(histogram.tg);
    myPosInterpolator.setTransformAxis(axisT3D);
    myPosInterpolator.setKeyFrames(myKeyFrame);
    myPosInterpolator.setTargetAppearance(histogramCA);
    myPosInterpolator.setColorRamp(colorRamp);
    myPosInterpolator.setSchedulingBounds(objectBound);

    histogram.tg.addChild(myPosInterpolator);
    
    /***** End Animation Behavior *****/ 
    
    
    /***** Setting Up Interactive Timestepping Behaviour *****/
    /* OBSOLETE ... this is replace with the UI for Next and Prev Step button
    timestepper = new TimestepBehavior(histogram, histogramData.maxProton, histogramData.maxNeutron, colorRamp);
    timestepper.setSchedulingBounds(objectBound);
    histogram.tg.addChild(timestepper);
    
    /***** End Timestepping Behavior *****/ 
    
    return histogram.tg;
    }
    
  
  
  public BranchGroup createSceneGraph(SimpleUniverse su, boolean logScale)
    {
	   
    BranchGroup rootBG = new BranchGroup();
    int[] protonNumber;
    int[] neutronNumber;
    
    float[] knot;
    float[][] histogramValue;
    double logAdditionConstant = 0.0f;
    
    
    
    // Create Transfrom Group to rotate viewpoint
    Transform3D viewPointT3D = new Transform3D();
    TransformGroup viewPointTG = new TransformGroup(viewPointT3D);
    viewPointTG.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
    viewPointTG.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
    
   
    // Transform group to scale all objects
   
    TransformGroup scaleTG = new TransformGroup();
    Transform3D scaleT3D = new Transform3D();
    scaleT3D.setScale(0.05);
    scaleTG.setTransform(scaleT3D);
    
    
    // Create the bounding Sphere
    
    // BoundingSphere myBound = new BoundingSphere();
    
    Point3d lower = new Point3d(0.0, 0.0, 0.0);
    Point3d upper = new Point3d(0.0, 0.0, 0.0);
    BoundingBox myBound = new BoundingBox(lower, upper);    
    
    // Mouse Navigation to rotate/translate/zoom view point
   
    TransformGroup vpTransformGroup = su.getViewingPlatform().getViewPlatformTransform();
    BoundingSphere mouseBounds = new BoundingSphere(new Point3d(), 1000.0);
    
    MouseRotate myMouseRotate = new MouseRotate();
    myMouseRotate.setTransformGroup(viewPointTG);
    myMouseRotate.setSchedulingBounds(mouseBounds);
    rootBG.addChild(myMouseRotate);
    
    MouseTranslate myMouseTranslate = new MouseTranslate();
    myMouseTranslate.setTransformGroup(viewPointTG);
    myMouseTranslate.setSchedulingBounds(mouseBounds);
    rootBG.addChild(myMouseTranslate);
    
    MouseZoom myMouseZoom = new MouseZoom();
    myMouseZoom.setTransformGroup(viewPointTG);
    myMouseZoom.setSchedulingBounds(mouseBounds);
    rootBG.addChild(myMouseZoom);    
    
    rootBG.addChild(viewPointTG);
    viewPointTG.addChild(scaleTG);
    
    // Create all the Histograms
    
    histograms   = new Histogram3D[histogramData.nonZeroAbundanceCount];
    positionInterpolator = new KBRotPosScaleSplinePathInterpolator[histogramData.nonZeroAbundanceCount];
    
    int c=0;
    for(int i=0; i<=histogramData.maxProton; i++)
      {
      for(int j=0; j<=histogramData.maxNeutron; j++)
        {
        if(histogramData.nonZeroAbundance[i][j] == true)
          {
          histograms[c] = new Histogram3D(i, j, normalizationFactor, histogramData.totalTimeStep);
          c++;
          }
        }
      }
    
    
    // Creating knot for each of that histogram
    
    knot = new float[histogramData.totalTimeStep];
    for(int j=0; j<histogramData.totalTimeStep; j++)
      {
      // Log time scale
      if(histogramData.time[j] <= 0.0)
        knot[j] = 0.0f;
      else
        {
        if(histogramData.time[0] == 0.0)
          {
          knot[j] = (float) Math.log(histogramData.time[j]) / 
                    (float) Math.log(histogramData.time[(histogramData.totalTimeStep-1)]) * 1.0f;
          }
        else
          {
          knot[j] = (float) (Math.log(histogramData.time[j]) - Math.log(histogramData.time[0])) / 
                    (float) (Math.log(histogramData.time[(histogramData.totalTimeStep-1)]) - Math.log(histogramData.time[0])) * 1.0f;
          }
        }
      
      // System.out.println("knot : " + knot[j] + " time: " + histogramData.time[j]);
      // System.out.println("time : " + histogramData.time[j] + " totalTimeStep : " + histogramData.time[histogramData.totalTimeStep-1]);
      }
    
    
    
    // Constant to shift the histogram posisiton when log scale is used and the abundance < 1
    
    if(Math.log(histogramData.minAbundance)/Math.log(10) <= 0)
      {
      logAdditionConstant = Math.abs(Math.log(histogramData.minAbundance));
      }
    
    // Creating position for each histogram 
    
    for(int i=0; i<histogramData.nonZeroAbundanceCount; i++)
       {
      for(int j=0; j<histogramData.totalTimeStep; j++)
        {
        // Logarithmic Scaling is used
        if(logScale)
          {
          if(histogramData.population[histograms[i].protonNumber][histograms[i].neutronNumber][j] == 0)
            histograms[i].abundance[j] = (float)0.0;
          else
            histograms[i].abundance[j] = (float)(Math.log((double)histogramData.population[histograms[i].protonNumber][histograms[i].neutronNumber][j]) 
                                                  + logAdditionConstant) / 
                                         (float)(Math.log((double)histogramData.maxAbundance) + logAdditionConstant) * normalizationFactor;
            // System.out.println("Abundance :" + histograms[i].abundance[j]);
          if(histograms[i].abundance[j] < 0.0)
            {
            System.out.println("Error:" + histograms[i].abundance[j]);
            }
          }
        // Linear Scaling is used  
        else
          {
          histograms[i].abundance[j] = (float) histogramData.population[histograms[i].protonNumber][histograms[i].neutronNumber][j]
                                      / (float) histogramData.maxAbundance * normalizationFactor;
          // System.out.println("Abundance :" + histograms[i].abundance[j]);
          }
          
        if(histograms[i].abundance[j] > normalizationFactor)
          histograms[i].abundance[j] = normalizationFactor;
        }
      }
    
    System.out.println("Total Histogram: " + histograms.length);
    
    
    for(int i=0; i<histogramData.nonZeroAbundanceCount; i++)
      {
      positionInterpolator[i] = new KBRotPosScaleSplinePathInterpolator();
      histograms[i].tg = translateTransformGroup(histograms[i], myBound,  knot, positionInterpolator[i]);
      scaleTG.addChild(histograms[i].tg);
      }
    
    // End creating histograms for each nuclei
    
    
    // Create dummy interpolator for updating time
    
    TransformGroup dummyTarget = new TransformGroup();
    Transform3D dummyT3D  = new Transform3D();
    KBKeyFrame[] dummyKeyFrame = new KBKeyFrame[2];
    
    dummyKeyFrame[0] = new KBKeyFrame(0.0f, 1, new Point3f(0.0f,0.0f,0.0f), 
                                      0.0f, 0.0f, 0.0f, 
                                      new Point3f(1.0f,1.0f,1.0f),
                                      0.0f, 0.0f, 0.0f); 
    
    dummyKeyFrame[1] = new KBKeyFrame(1.0f, 1, new Point3f(0.0f,0.0f,0.0f), 
                                      0.0f, 0.0f, 0.0f, 
                                      new Point3f(1.0f,1.0f,1.0f),
                                      0.0f, 0.0f, 0.0f); 
    
    KBRotPosScaleSplinePathInterpolator timeUpdateInterpolator = new KBRotPosScaleSplinePathInterpolator
                                                                       (alphaAnimation, 
                                                                        dummyTarget,
                                                                        dummyT3D,
                                                                        dummyKeyFrame,
                                                                        timeDisplay);
    timeUpdateInterpolator.setSchedulingBounds(myBound);                                                                       
    scaleTG.addChild(timeUpdateInterpolator);
    
    // End Dummy interpolator
    
    timeDisplay.setMinMaxTime(histogramData.time[0], histogramData.time[histogramData.totalTimeStep-1]);
    

    // Now create a black box to block the -y axis
    Appearance myAppearance = new Appearance();
    Appearance myAppearance2 = new Appearance();
    ColoringAttributes ca = new ColoringAttributes();
    ColoringAttributes ca2 = new ColoringAttributes();
    ca.setColor(black);
    ca2.setColor(grey);
    myAppearance.setColoringAttributes(ca);
    myAppearance2.setColoringAttributes(ca2);
    
    Box blockingBox = new Box(0.5f*histogramData.maxNeutron+1.0f, normalizationFactor, 0.5f*histogramData.maxProton+1.0f, myAppearance);
    Box surfaceBox  = new Box(0.5f*histogramData.maxNeutron+1.0f, 0.1f, 0.5f*histogramData.maxProton+1.0f, myAppearance2);
    GridBoxText gridBox = new GridBoxText(histogramData.maxNeutron, (int)Math.ceil(normalizationFactor), histogramData.maxProton);
    ColorLegend legend;
    
    /*
    if(logScale)
      {
      legend = new ColorLegend((float)(Math.log(histogramData.minAbundance)/Math.log(10)), 
                                           (float)(Math.log(histogramData.maxAbundance)/Math.log(10)) );
      }
    else
      {
      legend = new ColorLegend((float)histogramData.minAbundance, (float)histogramData.maxAbundance);
      }
    */
    
    // Legend should not be log-ed
    legend = new ColorLegend((float)histogramData.minAbundance, (float)histogramData.maxAbundance);
    
    
    Font3D font3d = new Font3D(new Font("Arial", Font.PLAIN, 1), new FontExtrusion());
    Text3D neutronText3D = new Text3D(font3d, "Neutrons", new Point3f(0.0f, 0.0f, 0.0f), Text3D.ALIGN_CENTER, Text3D.PATH_RIGHT);
    Shape3D neutronText = new Shape3D(neutronText3D);
    
    Text3D protonText3D = new Text3D(font3d, "Protons", new Point3f(0.0f, 0.0f, 0.0f), Text3D.ALIGN_CENTER, Text3D.PATH_RIGHT);
    Shape3D protonText = new Shape3D(protonText3D);
    
    Transform3D legendT3D = new Transform3D();
    Vector3d legendVector = new Vector3d(0.9f, 0.0f, +0.0f);
    legendT3D.set(legendVector);
    
    Transform3D blockingT3D = new Transform3D();
    Vector3d blockingVector = new Vector3d(0.0f, -normalizationFactor-0.1f, 0.0f);
    blockingT3D.set(blockingVector);
    
    Transform3D surfaceT3D = new Transform3D();
    Vector3d surfaceVector = new Vector3d(0.0f, -0.1f, 0.0f);
    surfaceT3D.set(surfaceVector);
    
    Transform3D surfaceGridT3D = new Transform3D();
    Vector3d surfaceGridVector = new Vector3d(-histogramData.maxNeutron/2.0f-0.5f, 0.1f, histogramData.maxProton/2.0+0.5f);
    surfaceGridT3D.set(surfaceGridVector);
    
    Transform3D protonTextT3D1 = new Transform3D();
    Vector3d protonTextVector = new Vector3d(-histogramData.maxNeutron/2.0f-2.0f, 0.0f, 0.0f);
    protonTextT3D1.set(protonTextVector);
    
    Transform3D protonTextT3D2 = new Transform3D();
    protonTextT3D2.rotX(-Math.PI/2.0f);
    Transform3D protonTextT3D2b = new Transform3D();
    protonTextT3D2b.rotZ(Math.PI/2.0f);
    protonTextT3D2.mul(protonTextT3D2b);
  

    Transform3D neutronTextT3D1 = new Transform3D();
    Vector3d neutronTextVector = new Vector3d(0.0f, 0.0f, histogramData.maxProton/2.0+2.0f);
    neutronTextT3D1.set(neutronTextVector);
    
    Transform3D neutronTextT3D2 = new Transform3D();
    neutronTextT3D2.rotX(-Math.PI/2.0f);
    
    // Create a surface for y = 0 
    
    TransformGroup blockingTG = new TransformGroup(blockingT3D);
    TransformGroup surfaceTG = new TransformGroup(surfaceT3D);
    TransformGroup legendTG = legend.createColorLegend();
    legendTG.setTransform(legendT3D);
    
    TransformGroup surfaceGridTG = gridBox.createGridBoxText();
    surfaceGridTG.setTransform(surfaceGridT3D);
    
    TransformGroup neutronTextTG1 = new TransformGroup(neutronTextT3D1);
    TransformGroup neutronTextTG2 = new TransformGroup(neutronTextT3D2);
    
    TransformGroup protonTextTG1 = new TransformGroup(protonTextT3D1);
    TransformGroup protonTextTG2 = new TransformGroup(protonTextT3D2);
    
    scaleTG.addChild(blockingTG);
    scaleTG.addChild(surfaceTG);
    rootBG.addChild(legendTG);
    scaleTG.addChild(surfaceGridTG);
    scaleTG.addChild(neutronTextTG1);
    scaleTG.addChild(protonTextTG1);
    blockingTG.addChild(blockingBox);
    surfaceTG.addChild(surfaceBox);
    neutronTextTG1.addChild(neutronTextTG2);
    neutronTextTG2.addChild(neutronText);
    protonTextTG1.addChild(protonTextTG2);
    protonTextTG2.addChild(protonText);
    
    return rootBG;
    }
  
  public elementProto()
    {
    setLayout(new FlowLayout());
    
    // Create Canvas Panel
    
    Panel canvasPanel       = new Panel();
    GridBagLayout canvasPanelGl  = new GridBagLayout();
    GridBagConstraints canvasPanelGbc = new GridBagConstraints();
    canvasPanel.setLayout(canvasPanelGl);
    canvasPanelGbc.gridx      = 0;  
    canvasPanelGbc.gridy      = 0;     
    canvasPanelGbc.gridwidth  = 5;
    canvasPanelGbc.gridheight = 5;
    
    GraphicsConfiguration myConfig = SimpleUniverse.getPreferredConfiguration();
    Canvas3D myCanvas3D = new Canvas3D(myConfig);
    myCanvas3D.setSize(800,500);
    canvasPanel.add(myCanvas3D, canvasPanelGbc);
    add(canvasPanel);
    
    timeDisplay   = new TimeDisplay();
    myUniverse = new SimpleUniverse(myCanvas3D);

   // Create Control Panel
    
    Panel controlPanel= new Panel();
    GridBagLayout controlPanelGl  = new GridBagLayout();
    GridBagConstraints controlPanelGbc = new GridBagConstraints();
    controlPanel.setLayout(controlPanelGl);
    controlPanelGbc.weightx = 100;  
    controlPanelGbc.weighty = 100;  
    controlPanelGbc.fill = GridBagConstraints.BOTH;
    controlPanelGbc.anchor = GridBagConstraints.CENTER;
    
    controlPanelGbc.gridx = 0;  
    controlPanelGbc.gridy = 1;
    controlPanelGbc.gridwidth = 2;
    controlPanelGbc.gridheight = 1;
    Label speedLabel = new Label(" - Animation Speed +", Label.CENTER);
    controlPanel.add(speedLabel, controlPanelGbc);
    
    controlPanelGbc.gridx = 0;  
    controlPanelGbc.gridy = 2;
    controlPanelGbc.gridwidth = 2;  
    controlPanelGbc.gridheight = 1;
    Scrollbar speedSlider = new Scrollbar(Scrollbar.HORIZONTAL, 5, 1,  0, 11);
    speedSlider.setUnitIncrement (1);
    controlPanel.add(speedSlider, controlPanelGbc);
    speedSlider.addAdjustmentListener(this);

    
    controlPanelGbc.gridx = 0;
    controlPanelGbc.gridy = 3;
    controlPanelGbc.gridwidth = 2;
    controlPanelGbc.gridheight = 1;
    animateButton = new Button("Timestep Mode");
    controlPanel.add(animateButton, controlPanelGbc);
    animateButton.addActionListener (this);
    
    controlPanelGbc.gridx = 2;
    controlPanelGbc.gridy = 0;
    controlPanelGbc.gridwidth = 1;
    controlPanelGbc.gridheight = 4;
    Label spacer = new Label(" ");
    controlPanel.add(spacer, controlPanelGbc);
    
    controlPanelGbc.fill = GridBagConstraints.NONE;
    controlPanelGbc.anchor = GridBagConstraints.WEST;
    
    controlPanelGbc.gridx = 3;
    controlPanelGbc.gridy = 0;
    controlPanelGbc.gridwidth = 6;
    controlPanelGbc.gridheight = 2;
    Label scaleModeLabel = new Label(" Scale Mode ", Label.CENTER);
    controlPanel.add(scaleModeLabel, controlPanelGbc);
    
    
    scaleMode = new CheckboxGroup();
    
    controlPanelGbc.gridx = 3;
    controlPanelGbc.gridy = 2;
    controlPanelGbc.gridwidth = 6;
    controlPanelGbc.gridheight = 1;
    linear = new Checkbox("Linear", scaleMode, false);
    controlPanel.add(linear, controlPanelGbc);
    linear.addItemListener(this);
    
    controlPanelGbc.gridx = 3;
    controlPanelGbc.gridy = 3;
    controlPanelGbc.gridwidth = 6;
    controlPanelGbc.gridheight = 1;
    logarithmic = new Checkbox("Logarithmic", scaleMode, true);
    controlPanel.add(logarithmic, controlPanelGbc);
    logarithmic.addItemListener(this);
    
    controlPanelGbc.gridx = 10;
    controlPanelGbc.gridy = 0;
    controlPanelGbc.gridwidth = 8;
    controlPanelGbc.gridheight = 2;
    Label timeLabel = new Label("Time (sec)", Label.CENTER);
    controlPanel.add(timeLabel, controlPanelGbc);
    
    controlPanelGbc.gridx = 10;
    controlPanelGbc.gridy = 2;
    controlPanelGbc.gridwidth = 12;
    controlPanelGbc.gridheight = 2;
    controlPanel.add(timeDisplay.timeText, controlPanelGbc);
    
    controlPanelGbc.gridx = 22;
    controlPanelGbc.gridy = 0;
    controlPanelGbc.gridwidth = 8;
    controlPanelGbc.gridheight = 2;
    Label timeStepLabel = new Label(" Timestep ", Label.CENTER);
    controlPanel.add(timeStepLabel, controlPanelGbc);
    
    
    controlPanelGbc.gridx = 22;
    controlPanelGbc.gridy = 2;
    controlPanelGbc.gridwidth = 4;
    controlPanelGbc.gridheight = 1;
    prevStepButton = new Button("< Prev");
    controlPanel.add(prevStepButton, controlPanelGbc);
    prevStepButton.addActionListener(this);   
    prevStepButton.setEnabled(false);
    
    controlPanelGbc.gridx = 26;
    controlPanelGbc.gridy = 2;
    controlPanelGbc.gridwidth = 4;
    controlPanelGbc.gridheight = 1;
    nextStepButton = new Button("Next >");
    controlPanel.add(nextStepButton, controlPanelGbc);
    nextStepButton.addActionListener(this);   
    nextStepButton.setEnabled(false);
    
    
    controlPanelGbc.gridx = 0;
    controlPanelGbc.gridy = 4;
    controlPanelGbc.gridwidth = 14;
    controlPanelGbc.gridheight = 2;
    Label loadDataLabel = new Label(" Load data file: ", Label.CENTER);
    controlPanel.add(loadDataLabel, controlPanelGbc);
    
    
    controlPanelGbc.gridx = 0;
    controlPanelGbc.gridy = 6;
    controlPanelGbc.gridwidth = 10;
    controlPanelGbc.gridheight = 2;
    loadDataText = new TextField(20);
    controlPanel.add(loadDataText, controlPanelGbc);
    
    controlPanelGbc.gridx = 0;
    controlPanelGbc.gridy = 10;
    controlPanelGbc.gridwidth = 2;
    controlPanelGbc.gridheight = 2;
    browseButton = new Button("Browse");
    controlPanel.add(browseButton, controlPanelGbc);
    browseButton.addActionListener(this);
    
    controlPanelGbc.gridx = 23;
    controlPanelGbc.gridy = 6;
    controlPanelGbc.gridwidth = 14;
    controlPanelGbc.gridheight = 2;
    loadParserCheck = new Checkbox(" Use parser ");
    loadParserCheck.addItemListener(this);
    controlPanel.add(loadParserCheck, controlPanelGbc);
    
    controlPanelGbc.gridx = 10;
    controlPanelGbc.gridy = 4;
    controlPanelGbc.gridwidth = 14;
    controlPanelGbc.gridheight = 2;
    loadParserText = new TextField(20);
    loadParserText.setEditable(false);
    controlPanel.add(loadParserText, controlPanelGbc);
    
    controlPanelGbc.gridx = 10;
    controlPanelGbc.gridy = 6;
    controlPanelGbc.gridwidth = 4;
    controlPanelGbc.gridheight = 2;
    browseParserButton = new Button("Browse");
    controlPanel.add(browseParserButton, controlPanelGbc);
    browseParserButton.addActionListener(this);
    browseParserButton.setEnabled(false);
    
    controlPanelGbc.gridx = 23;
    controlPanelGbc.gridy = 4;
    controlPanelGbc.gridwidth = 8;
    controlPanelGbc.gridheight = 2;
    readDataButton = new Button("  Read Data  ");
    controlPanel.add(readDataButton, controlPanelGbc);
    readDataButton.addActionListener(this);
	
	
	// ni's input
	controlPanelGbc.gridx = 15;
    controlPanelGbc.gridy = 10;
    controlPanelGbc.gridwidth = 1;
    controlPanelGbc.gridheight = 2;
    Label ZLabel = new Label("Z", Label.CENTER);
    controlPanel.add(ZLabel, controlPanelGbc);
	
	controlPanelGbc.gridx = 10;
    controlPanelGbc.gridy = 10;
    controlPanelGbc.gridwidth = 4;
    controlPanelGbc.gridheight = 2;
    protonValueText = new TextField(6);
    controlPanel.add(protonValueText, controlPanelGbc);
	
	controlPanelGbc.gridx = 22;
    controlPanelGbc.gridy = 10;
    controlPanelGbc.gridwidth = 1;
    controlPanelGbc.gridheight = 2;
    Label NLabel = new Label("N", Label.CENTER);
    controlPanel.add(NLabel, controlPanelGbc);
	
	controlPanelGbc.gridx = 17;
    controlPanelGbc.gridy = 10;
    controlPanelGbc.gridwidth = 4;
    controlPanelGbc.gridheight = 2;
    neutronValueText = new TextField(6);
    controlPanel.add(neutronValueText, controlPanelGbc);
	
	controlPanelGbc.gridx = 23;
    controlPanelGbc.gridy = 10;
    controlPanelGbc.gridwidth = 8;
    controlPanelGbc.gridheight = 2;
    cropDataButton = new Button("  Crop Data  ");
    controlPanel.add(cropDataButton, controlPanelGbc);
    cropDataButton.addActionListener(this);
	

	
	///////////////////////////////////////////
    
    add(controlPanel);
    
    myUniverse.getViewingPlatform().setNominalViewingTransform();
    }
  
  
  
  private void stopInterpolator()
    {
    for(int i=0; i<histogramData.nonZeroAbundanceCount;i++)
      {
      positionInterpolator[i].setEnable(false);
      }
    }
  
  
  private void startInterpolator()
    {
    for(int i=0; i<histogramData.nonZeroAbundanceCount;i++)
      {
      positionInterpolator[i].setEnable(true);
      }
    }
    
    
  
  /* 
  * Toggle animation  
  */
  
  public void actionPerformed (ActionEvent event) 
    {
    Vector3f posVector = new Vector3f();
    ColoringAttributes ca;
    Color3f histColor = new Color3f();
    Transform3D targetT3D = new Transform3D();
    double curTime;
     
    Object source = event.getSource();
    
    if(source == animateButton)
      {
      try
        {
        if(animationOn)
          {
          animationOn = false;
          animateButton.setLabel("Animation Mode");
          stopInterpolator();
          prevStepButton.setEnabled(true);
          nextStepButton.setEnabled(true);
          
          // Pause Alpha
          alphaAnimation.pause();
          System.out.println("alphaVal: " + alphaAnimation.value());
          System.out.println("curTime : " + System.currentTimeMillis());
          System.out.println("alphaVal@curTime: " + alphaAnimation.value(System.currentTimeMillis()));
          System.out.println("pauseTime: " + alphaAnimation.getPauseTime());
          System.out.println("startTime: " + alphaAnimation.getStartTime());
          
          // Change the currTime in the Histogram3D to the closes lower bound of 
          // the current time in animation, so that when user click
          // stepNextButton, the next time step is the 'continuation' of this time
          
          curTime = timeDisplay.getTimeFromAlpha(alphaAnimation.value());
          int i = 0;
          while (curTime > histogramData.time[i])
            {
            i++;
            }
          offsetTimeIndex = i;
          }
        else
          {
          animationOn = true;
          animateButton.setLabel("Timestep Mode");
          startInterpolator();
          prevStepButton.setEnabled(false);
          nextStepButton.setEnabled(false);
          
          // Resume Alpha
          alphaAnimation.resume();
          System.out.println(alphaAnimation.value());
          }
        }
      catch (Exception e)
        {
        System.err.println ("Exception " + e);
        }
      }
    
    if(source == nextStepButton)
      {
      try
        {
        for(int i=0; i<histograms.length; i++)
          {
          //int i = 1;
          posVector.set((float)histograms[i].neutronNumber - ((float) histogramData.maxNeutron/2.0f), 
                    (float) histograms[i].getNextAbundance(offsetTimeIndex) - histograms[i].normalizationFactor, 
                    (float) -histograms[i].protonNumber + ((float) histogramData.maxProton/2.0f));
          ca = histograms[i].fillingAppearance.getColoringAttributes();
          colorRamp.getColor(histograms[i].getCurrAbundance()-histograms[i].normalizationFactor, histColor);
          ca.setColor(histColor);
          targetT3D.set(posVector);
          histograms[i].tg.setTransform(targetT3D);
          }
        offsetTimeIndex = 0;
        timeDisplay.updateDisplayFromTime(histogramData.time[histograms[0].getCurrTimeIndex()]);
        }
      catch (Exception e)
        {
        System.err.println("Exception " + e);
        }
      }  
      
    if(source == prevStepButton)
      {
      try
        {
        for(int i=0; i<histograms.length; i++)
          {
          //int i = 1;
          posVector.set((float)histograms[i].neutronNumber - ((float) histogramData.maxNeutron/2.0f), 
                    (float) histograms[i].getPrevAbundance(offsetTimeIndex) - histograms[i].normalizationFactor, 
                    (float) -histograms[i].protonNumber + ((float) histogramData.maxProton/2.0f));
          ca = histograms[i].fillingAppearance.getColoringAttributes();
          colorRamp.getColor(histograms[i].getCurrAbundance()-histograms[i].normalizationFactor, histColor);
          ca.setColor(histColor);
          targetT3D.set(posVector);
          histograms[i].tg.setTransform(targetT3D);
          }
        offsetTimeIndex = 0;
        timeDisplay.updateDisplayFromTime(histogramData.time[histograms[0].getCurrTimeIndex()]);
        }
      catch (Exception e)
        {
        System.err.println("Exception " + e);
        }
      }  
    
    if(source == browseButton)
      {
      try
        {
        loadDataDialog = new FileDialog(new Frame(), "Browse", FileDialog.LOAD);
        loadDataDialog.setDirectory(lastOpenedDataDir);
        loadDataDialog.show();
        if(loadDataDialog.getFile() != null)
          loadDataText.setText(loadDataDialog.getDirectory() + loadDataDialog.getFile());
        lastOpenedDataDir = loadDataDialog.getDirectory();
        }
      catch (Exception e)
        {
        System.err.println("Exception " + e);
        }
      }
    
    if(source == browseParserButton)
      {
      try
        {
        loadParserDialog = new FileDialog(new Frame(), "Browse", FileDialog.LOAD);
        loadParserDialog.setDirectory(lastOpenedParserDir);
        loadParserDialog.show();
        if(loadParserDialog.getFile() != null)
          loadParserText.setText(loadParserDialog.getDirectory() + loadParserDialog.getFile());
        lastOpenedParserDir = loadParserDialog.getDirectory();
        }
      catch (Exception e)
        {
        System.err.println("Exception " + e);
        }
      }
    
    if(source == readDataButton)
      {
      String dataFilename = loadDataText.getText();
      if(dataFilename != null)
        {
        if(scene != null)
          scene.detach();
        histogramData = new ReadVariableData(dataFilename);
        alphaAnimation = new Alpha(-1, Alpha.INCREASING_ENABLE, 2000, 2000,
                                     alphaDuration, 0, 2000,
                                     0, 0, 0);
        if(logarithmic.getState())                                     
          scene = createSceneGraph(myUniverse, true);
        else
          scene = createSceneGraph(myUniverse, false);
        scene.setCapability(BranchGroup.ALLOW_DETACH);
        scene.compile();
        myUniverse.addBranchGraph(scene);
        }
      }
// niyi's input
     if(source == cropDataButton)
      {
      String cropdataFile = protonValueText.getText();
	  String cropdataFile2 = neutronValueText.getText();
	  String dataFilename = loadDataText.getText();
      if(cropdataFile != null & cropdataFile2 != null  & dataFilename != null)
        {
        if(scene != null)
          scene.detach();
        histogramData = new ReadVariableData(cropdataFile, cropdataFile2, dataFilename);
        alphaAnimation = new Alpha(-1, Alpha.INCREASING_ENABLE, 2000, 2000,
                                     alphaDuration, 0, 2000,
                                     0, 0, 0);
        if(logarithmic.getState())                                     
          scene = createSceneGraph(myUniverse, true);
        else
          scene = createSceneGraph(myUniverse, false);
        scene.setCapability(BranchGroup.ALLOW_DETACH);
        scene.compile();
        myUniverse.addBranchGraph(scene);
        }
      }        
    }    

  
  /* 
  * Toggle the interpolators  
  */
  public void itemStateChanged (ItemEvent e) 
    {
    if(loadParserCheck.getState())
      {
      browseParserButton.setEnabled(true);
      loadParserText.setEditable(true);
      }
    else
      {
      browseParserButton.setEnabled(false);
      loadParserText.setEditable(false);
      }

    if(e.getItem().equals("Logarithmic"))
      {
      if(scene != null)
        {
        scene.detach();
        scene = null;
        histograms = null;
        scene = createSceneGraph(myUniverse, true);
        scene.setCapability(BranchGroup.ALLOW_DETACH);
        scene.compile();
        myUniverse.addBranchGraph(scene);
        }
      }
    if(e.getItem().equals("Linear"))
      {
      if(scene != null)
        {
        scene.detach();
        scene = null;
        histograms = null;
        scene = createSceneGraph(myUniverse, false);
        scene.setCapability(BranchGroup.ALLOW_DETACH);
        scene.compile();
        myUniverse.addBranchGraph(scene);
        }
      }
    }    


  // Event Handler for animation speed adjustment
  
  public void adjustmentValueChanged (AdjustmentEvent e) 
    {
    int value = e.getValue();
    alphaDuration = 51000 - (5000 * value);
    alphaAnimation.setIncreasingAlphaDuration(alphaDuration);
    }

  
  public static void main(String[] args)
    {
    new MainFrame(new elementProto(), 800, 700);
    }
    
  }
